---
layout:     post
title:      "Plannet"
subtitle:   "[SERVLET] [MAVEN] [ANDROID]"
date:       2014-12-11 12:00:00
author:     "SturdyEgg"
header-img: "img/post_plannet/title.jpg"
---
 
 <!-- **[Github Link](https://github.com/deplax/)** -->

#Summary

|**Project name :** Plannet
|**Language :** Java, JavaScript
|**Type of project :** Team project
|**Project duration :** 3 month
|**Source code :** <a href="https://github.com/deplax/2014-03-DEVWEB-PLANNET/tree/server" style="color:#3366FF; font-weight:bold">Github Link</a>

####Brief Description <br>
계획을 관리하는 안드로이드 애플리케이션.

<br/>


#Description

NHN NHXT 3학기 개발 경험 프로젝트 과목에서 4인 팀으로 진행한 프로젝트이다. server는 tomcat servlet을 이용하였으며 front는 android를 선택하여 진행하였다. 

server의 작성과 android 프로그래밍 모두 팀원 전원이 처음 접하는 부분으로 시행착오가 유난히 많았고, 다양한 시스템과 프로그램(GenyMotion, Bootstrap, GoogleSMTP )을 경험해 볼 수 있는 기회를 제공한 프로젝트였다.

위와 같은 이유로 계획을 관리 및 공유하는 안드로이드 애플리케이션을 작성하려 하였으나 기본 계획을 작성하는 부분까지 완성하고 프로젝트는 종료되었다.

팀에서의 역할 : 팀의 일정관리 및 조율을 담당했으며 메일 인증, UUID를 사용한 인증, 안드로이드의 Tab화면, plan의 in/out

<br/><br/>


#Postmortem 

프로젝트시에 작성한 것을 그대로 옮김.

####어려웠던 점
* 자율성을 믿은 [규칙의 부재]
: 팀이 결성될 당시 개개인의 자율성을 믿고 모든 규칙을 최소화 하는 것에 동의하였다. 그 결과 지각에 대한 페널티는 물론 어떠한 역할이나 규칙이 존재하지 않은 상황에서 프로젝트 마무리까지 오게 되었다.
: 규칙의 부재는 시간약속에서 두드러지게 발견되었다. 만나기로 약속한 시간은 3시. 실제로 만나서 코딩을 시작하는 시간은 5시. 그리고 한 시간 뒤에는 밥 먹으러 떠난다. 팀 모임을 시작하는 보통의 과정이다. 이마저 어렵게 모인 팀원이 별안간 사라진다. 
: 이 문제는 팀 시간 운영에 많은 영향을 끼쳤고 반복되면서 팀 전체적으로 시간에 대한 감각이 무뎌지게 되었다.
: 우리는 초기에 규칙의 부재로 인해 부정적인 부분이 발견되면 그 즉시 규칙을 만들기로 했는데 이 부분을 모두 잊고 있었다.     
 
* 끝나지 않는 로그인
: 사실 엄밀하게 따지면 로그인에 투자인 시간이 절대적으로 높은 것은 아니다. 기능을 부분부분 구현해 보는 과정이 앞서 존재하였고 안드로이드 클라이언트로 인해 다른 팀에 비해 본격적인 개발이 늦춰진 탓에, 그리고 로그인을 제외한 기능이 코드에서 합쳐지지 않는 바람에 로그인 개발 과정이 긴 것처럼 비춰졌다. 하지만 뒤늦게 시작한 개발과 최종 마감까지의 시간을 생각해 본다면 분명 로그인 개발만 절반 이상 한 것이 맞다. 기능을 구현하는 동안에 대부분의 기능이 타협 없이 들어갔으며, 문제는 그 로그인 기능들이 계속해서 늘어갔다는 점이다. 
 
* 자신에게만 있는 코드
: 프로젝트 후반에 이르기까지 Git의 활용이 눈에 띄지 않았다. 대부분 팀원이 모두 있는 자리에서 짝 코딩 형태로 이루어져 코드의 이동이 적어 Git의 필요성을 느끼지 못하였다. commit의 간격은 상당히 멀었으며 Git에 있는 이슈관리 등의 기능을 활용해 보지 못해 아쉬웠다. 기능단위의 commit을 하고 싶었으나 팀 모임에서 그 날의 일정이 모두 종료된 후에 commit이 하나 올라가는 것이 일반적이었다.  그로 인해 코드를 실수로 소멸시키거나 중간에 잠깐 바꿔보았던 기능을 떠올릴 때는 기억에 의존하는 수밖에 없었다.
: 기능별로 코딩을 진행할 때 상대 코드에 대한 이해가 적었다. 코드를 뒤져도 발견되지 않는 주석은 모든 코드를 새로 분석하게 만들었고 우연인지 필연이지 상대가 작성한 코드에서 문제점이 발견된 경우에 코드를 짠 본인은 자리에 있지 않았다. 결국 코드를 새로 분석하는 시간이 추가적으로 소모되었고 이 또한 새로 분석해서 끝마치는 경우보다 어딘가로 사라졌던 팀원이 돌아와 한 줄을 고치는 경우가 빨랐다. 
 
* 서버와 클라이언트를 모두가 다시 처음부터
: 4명의 팀원 중에서 2명은 서버를 2명은 안드로이드로 갈라졌다. 각자의 진영에서 공부하고 일정기간 후에 교차하여 진행하는데 그 동안 공부한 내용을 서로에게 알려주어 빠른 성장을 노리고자 하였다. 하지만 진영을 서로 교체할 때 정리한 내용이나 전달이 불충분하여 두 진영 모두 처음부터 새로 공부하게 되었다. 그리고 각자의 진영을 교체할 때, 만든 부분에서 이어나갈 수 있었는데, 처음부터 새로 짰다. 처음부터 차근차근 개발함으로써 제대로 공부할 수 있었지만 스위칭 하는 시점부터 처음부터 다시 짜야 되니 다른 팀보다 프로젝트 진행 속도가 현저히 느려졌다.  이는 프로젝트 전체 시간을 초반에 상당량 소모하게 되었고 후반에 일정을 쫓기게 하는 밑거름이 되었다. 
 
* 의존적인 테스트
: 프로젝트 중반을 넘어서 각 진영이 분명하게 갈라졌고 테스트를 위해 상대 진영의 요청이나 응답이 필요한 경우가 빈번히 발생하였다. 테스트를 위해 상대방을 찾는 경우 보통 관련 코드가 작성되지 않았으며, 당장 할 일이 없어진 테스트 요청 진영은 마냥 기다리거나 간단한 작업만이 가능하였다. 또 반대의 경우도 마찬가지였으며 이는 팀 전체에 비효율을 낳았고 팀 회의가 산만해지는 결과를 가져왔다. 테스트 코드를 만들었다면 대부분 해결되는 문제이지만 후반까지 테스트 코드가 자리 잡지 못했다. 


####잘된 점.
* Server 그리고 Android.
: 초기 설계에서 클라이언트를 안드로이드로 정하였다. 4명의 팀원이 2명씩 나누어 안드로이드와 서버를 번갈아 가면서 만지게 되었다. 덕분에 2가지를 모두 체험할 수 있었다. 팀원이 2가지 진영을 모두 숙지한 상태에서 진행함에 따라 특정 부분에 문제가 생기더라도 어느 팀원이든 투입이 가능한 상태가 되었고, 다른 팀과는 다른 색다른 경험을 할 수 있었다.
 
* 돌아간다!!!!!!!!
: 프로젝트의 과정을 모두 지켜봤다면 이 이야기는 정말 가슴 벅찬 이야기로 다가온다. 클라이언트와 서버가 만나기까지 프로젝트 전체 시간의 절반이 걸렸다. 하지만 잠깐 스치는 인연이었을 뿐, 테스트 코드가 아닌 정식 기능단위로 만나기까지는 많은 우여곡절과 흥미진진한 이야기를 동반한다. 안드로이드라는 것이 생각보다 녹록하지 않았다. 웹을 예제로 배웠던 부분들이 안드로이드에 없는 경우도 있었고 안드로이드의 경우 어떻게 구현하는지 감조차 잡지 못하는 경우가 많았다. 더욱이 안드로이드에서 문제가 발생하면 원인을 찾는 데만 상당한 시간이 소요되고 해결책까지 찾았을 경우는 회의가 끝난 뒤가 많았다.
 
* 적당한 수준에서 정리한 프로젝트의 규모
: 초기 설정한 프로젝트의 규모는 구글 스토어 출시를 염두에 둔 설계로 실사용자를 대상으로 하는 팀 이름 그대로의 1000만 다운로드였다.  하지만 전체적인 재설계를 통해 프로젝트의 규모를 대폭 낮추고 "이번 학기는 프로젝트의 결과물 도출보다 서버에 대한 스터디를 중심으로 하자" 타협하였다. 초기의 선택으로 인해 프로젝트 규모는 적당한 수준으로 내려왔고 돌아만 가는 코드가 아닌 이해하는 코드가 프로젝트의 대부분을 채워 나갔다.
 
* 시나브로 향상되는 팀의 운영
: 팀이 결성되고 팀 전체를 놓고 보았을 때, 운영이라는 것이 딱히 없었다. 규칙도 존재하지 않았고 팀 회의도 상황 되는대로 자유롭게 모였으며 전체적인 계획도 마찬가지였다. 하지만 한 주 한 주가 지남에 따라 팀의 부족했던 부분을 보충하고 계속해서 새로운 방식을 시도하여 이 팀만의 색깔을 찾기 시작하였다.
: 회의나 협업 시간을 종합해보면 시간이 얽매이지 않고 20시부터 다음날 3시 정도에 자연스럽게 자리 잡았고 의외로 낮에 하는 작업들보다 높은 효율을 보일 때가 많았다.
: 인원을 나눠 1명을 동영상을 보고, 1명을 책을 보고, 다른 인원들은 실제 코드로 각각 공부하여 서로에게 알려주는 방식을 채택하기도 하였으며 일정수준에 이르기까지는 상당한 도움이 되었다. 또 팀원들을 위해 자신이 공부하면서 도움이 되었던 사이트나 자료들을 묶어 공유하기도 하였다.
: 시간이 지날수록 모이는 횟수와 팀 업을 위한 토론시간이 확장되었으며, 서로 안부를 묻거나 밥을 먹는 횟수가 늘어났다. 별 것 아닌 것 같지만 이렇게 지내는 사이에 협업 중에는 볼 수 없었던 부분을 발견하고 정말 팀이 되어가고 있었다.
 
* 로그인의 집요함
: 로그인 서비스에 상당한 집요함을 보여줬다. 팀원 모두에게 대충한다는 선택지는 없었고 모두의 동의하에 작동되는 순간까지 기능을 타협하지 않았다. (늘어났다.) 이는 프로젝트 일정에 중대한 결함을 남겨놓지만 초기단계의 설계에서 생각보다 많이 벗어나지 않았음을 알고 팀원들 모두가 놀라워하는 결과를 가져왔다. 시행착오를 겪으면서 프로젝트 전반의 코드는 점점 견고해갔고 기능이 추가됨에 있어서 오히려 시간이 단축되었다. 


<br/><br/>


#Screenshot

<img src="{{ site.baseurl }}/img/post_plannet/01.png" width="45%" style="text-align: center; float: left; padding: 10px">

<img src="{{ site.baseurl }}/img/post_plannet/02.png" width="45%" style="text-align: center; padding: 10px">

<img src="{{ site.baseurl }}/img/post_plannet/03.png" width="45%" style="text-align: center; float: left; padding: 10px">

<img src="{{ site.baseurl }}/img/post_plannet/04.png" width="45%" style="text-align: center; padding: 10px">

<img src="{{ site.baseurl }}/img/post_plannet/05.jpg" width="90%" style="text-align: center; padding: 10px">
서비스의 메일 인증 성공 화면.

<img src="{{ site.baseurl }}/img/post_plannet/06.png" width="90%" style="text-align: center; padding: 10px">
서버와 안드로이드가 만나는 과정.