---
layout:     post
title:      "성경송출 프로그램"
subtitle:   "[C#] [OFFICE-ADD]"
date:       2015-02-01 12:00:00
author:     "SturdyEgg"
header-img: "img/post_biblecall/title.jpg"
---
 
 <!-- **[Github Link](https://github.com/deplax/)** -->

#Summary

|**Project name :** BibleCall
|**Language :** C#
|**Type of project :** Personal project
|**Project duration :** 1 month
|**Source code :** <a href="https://github.com/deplax/officebible" style="color:#3366FF; font-weight:bold">Github Link</a>

####Brief Description <br>
오타 보정 기능을 지원하고, 성경 및 찬양을 각각의 Powerpoint Slide로 빠르게 제작해주는 Microsoft Powerpoint Add-on 프로그램.

<br/>


#Description

교회에서 성경과 찬양을 실시간으로 빠르게 띄우는 것은 교회 방송 엔지니어에겐 상당히 중요한 문제이다. 이 문제를 해결하기 위해 대부분의 오타를 바로잡아 주는 성경송출 프로그램을 제작하게 되었다. Microsoft Add-on 프로그램을 경험해 보는 것은 상당히 새로웠으나 MSDN이 잘 정리되어 있어 큰 어려움 없이 검색 몇 번 후에 시작할 수 있었다. 오타를 어떻게 보정 해줄지에 대해 많은 고민을 했고, 한글 자모 파싱에 대해 충분한 삽질이 녹아있는 프로젝트이다.

프로젝트는 크게 세 부분으로 나누어 진행되었다. 일부러 구분하여 시작한 것은 아니나 진행 중에 자연스레 나뉘게 되었는데 첫번째는 오타 보정이다. 이 부분은 순수하게 로직만으로 머리를 싸맸다. 내가 원했던 부분은 

* 한글의 영문 입력 (창세기 -> ckdtprl)
* 성경의 약어 입력 (창세기 -> 창)
* 자음 또는 모음 1~2개의 오타 (창세기 -> 창셔기)
* 입력 순서가 바뀜 (창세기 -> 찻에기)
* 키가 동시에 2개가 눌러짐 (창세기 -> 창ㅅ게기)

이런 식의 입력 중 일어날 수 있는 오타를 입력자의 의도대로 수정해주는 기능을 구현하였다. 어떤 입력이 들어오더라도 초성, 중성, 종성으로 나누어 처리하며 이 과정에서 세종대왕님의 치밀함에 놀랐다. 또 이중모음(ㅟ, ㅘ 등), 이중자음(읽, 찮 등)들은 로직의 복잡도를 한껏 증가시켰고, 이런 부분까지 경우의 수를 두어 따로 처리하였다. 프로젝트 전체에서 가장 시간이 많이 걸렸고 이 기능만으로도 많은 사람들이 다른 프로젝트에 적용해 보기를 권유하였다. 하지만 이곳에서의 용도가 맞을 뿐 맹점이 있다.

두번째는 레이아웃이다. 프로그램의 폼을 어떻게 잡을까 고민을 했다. 이 프로그램은 컴퓨터를 자주 다루는 전문가가 사용하기도 하지만, 가끔은 타이핑에 익숙하지 않은 분들도 사용할 것이다. 사실 원래 계획대로라면 마우스는 사용하지 않고 키보드만 사용하여 슬라이드를 생성하도록 하고 싶었으나(속도가 빠르다.) 타이핑에 익숙하지 않은 분들을 위하여 클릭으로 입력하는 부분도 추가하였다.

세번쨰는 슬라이드 생성 부분으로 글자의 위치와 레이아웃, 어떤식으로 보여질지에 대한 것을 코드로 만드는 것이다. MSDN을 가장 많이 참고한 파트이고, 로직의 문제보다는 제공되는 클래스들의 역할을 정확히 몰라 헤매는 경우가 많았다. 그런 경우는 샘플코드를 검색하여 진행하였고 배경화면을 지정하는 부분을 완성하지 못한체 프로젝트는 1차 마감되었다.


<br/><br/>


#Postmortem

####어려웠던 점
* 초성 중성 종성
: ㅇㅏㄴㄴㅕㅇ -> 안녕 으로 변경하는 문제가 이렇게 복잡할 줄은 몰랐다. 영문 입력을 한글로 바꾸기 위해 필요한 기능으로 한글에서 영어로 바꾸는 것은 그렇게 어려운 문제가 아니다. 하지만 영어에서 한글로 바꾸는 것은 초성, 중성, 종성에 따라 글자가 달라지고 유니코드 맵에 따라 처리해줘야 했다. 완전히 글자가 되는 [ㅇ ㅏ ㄴ -> 안] 이렇게 입력이 들어온다는 보장이 있으면 좋겠지만 [ㅜㅣ -> ㅟ] 이렇게 입력이 들어오기도 하고, 자음은 초성일 경우와 종성일 경우에 따라 역할이 바뀐다. 초성일 경우 이중자음이 허용되지 않으며, 종성일 경우 그 반대이다. 이 과정을 수행하는 것만으로도 많은 고민과 함께 시간이 소모되었다.

* FarEast Font
: 거의 프로젝트 막바지에 슬라이드에 한글이 있으면 폰트적용이 되지 않았다. 숫자와 영문은 문제 없었지만 한글만 폰트 적용이 되지 않기에, 인코딩 문제, 복사문제 등 여기저기 코드를 뜯어 보았다. 하지만 적용이 되지 않았고, 한글관련 문제로 구글에 검색하여도 비슷한 사례나 답을 찾을 수 없었다. 글로벌 프로그램에서 어느 지역만의 문제이기에 질문이 없는 듯 하였고, 이 문제는 점점 미해결 난제로 전락하기 시작했다. 다른 부분을 진행하면서도 "MS에서 지원을 하지 않는 것일까?"하고 결론을 내릴 쯤에 Font에 FarEast라는 것을 발견하였다. 동남아시아의 폰트 적용이 따로 설정하도록 되어 있었다. 메소드 하나를 찾지 못해 일주일 정도의 시간이 지연되었고 매소드를 변경하지마자 문제가 해결되었다.

* 구조에 신경쓰지 못함.
: 기능을 구현하는 부분에만 집중하여 테스트 코드와 구조적 프로그램이 전혀 고려되지 않았다. 특히나 막바지에 이르러 Font문제로 인해 여기저기 지저분한 코드와 주석으로 감싼 테스트코드가 산재한 상태에서 프로젝트가 1차 마감되었다. 후에 DB를 내장 SQL을 사용하는 방식으로 증설할 계획인데 그 때 리팩토링과 함께 메소드와 클래스의 역할분리 등 골조를 변경하여 확장할 계획이다.

####잘된 점.
* 여러 종류의 오타를 대응할 수 있다.
: 실시간으로 PPT를 자동생성 하다보면 확실히 마우스보다는 단축키와 키보드가 빠르다. 하지만 문제가 되는 것이 키보드로 입력하는 중에 오타가 발생하면 정상적으로 슬라이드가 생성되지 않고 오히려 더욱 늦어지게 된다. 이 문제를 해결하지 위해 발생할 수 있는 오타를 최대한 보정해주고자 했다. 한글을 자모 파싱하여 발생할 수 있는 오타의 대부분을 수정해주고 있으며 숫자를 눌르시에 숫자가 아닌 값이 같이 눌리더라도 제거하여 원활하게 슬라이드를 생성할 수 있도록 도와준다. 이 프로젝트에서 가장 공들인 부분이기도 하며 흡족한 부분이기도 하다.

* 기존에 찬양을 띄울 때의 문제점을 근본적으로 해결.
: 찬양을 띄울 때에 문제가 됐던 부분은 띄어쓰기였다. 기존에는 찬양지이 있는 폴더에 접근하여 검색을 하면 속도 문제가 있어 앞글자를 입력하면 폴더에서 그 위치로 커서가 변경되는 것을 이용하였다. 그렇게 그 부근으로 찾아간 후 방향키를 이용해 원하는 파일을 띄웠지만 지금은 꼭 앞글자부터 치지 않더라도 일치율이 가장 높은 찬양을 보여준다. 

* 실사용자의 요구사항을 대부분 반영
: 프로그램이 대부분 작성되었을 때 시연을 했다. 실사용자들의 요구사항과 실시간의 특성을 대부분 반영하여 매우 흡족해하였다. 물론 '음성지원이 되게 해달라.' 같은 난해한 요구사항은 해결 할 수 없었지만 그 동안 방송과정에서 문제가 되었던 부분들은 대부분 제거되었다.

<br/><br/>


#Preview video
<iframe src="https://www.youtube.com/embed/s7g1-5DzmNo" frameborder="0" allowfullscreen></iframe>

<br/><br/>

#Screenshot

<img src="{{ site.baseurl }}/img/post_biblecall/01.png" width="100%" style="text-align: center">